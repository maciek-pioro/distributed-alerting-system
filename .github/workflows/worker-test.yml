name: Deploy worker to Test

on:
  push:
    branches: ["test"]
    paths: ["worker-k8s/worker/**", "worker-k8s/deploy/**"]

env:
  PROJECT_ID: irio-solution
  GAR_LOCATION: europe-central2 # region of the Artifact Registry
  GKE_CLUSTER: test-cluster # TODO: update to cluster name
  GKE_ZONE: europe-central2 # TODO: update to cluster zone
  DEPLOYMENT_NAME: worker # TODO: update to deployment name
  REPOSITORY: k8s-docker-images # TODO: update to Artifact Registry docker repository
  IMAGE: worker
  SERVICES_COLLECTION_VALUE: services_test
  FIRST_EMAIL_TOPIC_VALUE: projects/irio-solution/topics/first-email-test

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: test

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configure Workload Identity Federation and generate an access token.
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/7432286469/locations/global/workloadIdentityPools/default-pool/providers/gh-provider"
          service_account: "gh-service-account@irio-solution.iam.gserviceaccount.com"

      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the worker Docker image
      - name: Build Worker
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            worker-k8s/worker
      # Push the Docker image to Google Artifact Registry
      - name: Publish Worker
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          # replacing the image name etc. in the k8s template
          ls -hal
          sed "s,IMAGE_PULL_POLICY,Always,g" ./worker-k8s/deploy/worker-deployment.yaml > worker-deployment.yaml
          sed -i "s,WORKER_IMAGE,$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA,g" worker-deployment.yaml
          sed -i "s,SERVICES_COLLECTION_VALUE,$SERVICES_COLLECTION_VALUE,g" worker-deployment.yaml
          sed -i "s,FIRST_EMAIL_TOPIC_VALUE,$FIRST_EMAIL_TOPIC_VALUE,g" worker-deployment.yaml
          ls -hal
          kubectl apply -f worker-deployment.yaml
          kubectl apply -f ./worker-k8s/deploy/roles.yaml
          kubectl apply -f ./worker-k8s/deploy/hpa.yaml
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
